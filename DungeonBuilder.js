// Generated by CoffeeScript 1.10.0
(function() {
  var Adventurer, Dungeon, Monster, Room, unitTypes,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Dungeon = (function() {
    function Dungeon() {
      this.addMonsterToRoom = bind(this.addMonsterToRoom, this);
      this.allocateRoom = bind(this.allocateRoom, this);
      this.narrate = bind(this.narrate, this);
      this.defeatAdventurer = bind(this.defeatAdventurer, this);
      this.numActiveMonsters = bind(this.numActiveMonsters, this);
      this.monsterWithLowestHp = bind(this.monsterWithLowestHp, this);
      this.anyMonstersActive = bind(this.anyMonstersActive, this);
      this.doCombat = bind(this.doCombat, this);
      this.encounterMonsters = bind(this.encounterMonsters, this);
      this.runDungeon = bind(this.runDungeon, this);
      this.buyAllAcolytes = bind(this.buyAllAcolytes, this);
      this.buyAllMonsters = bind(this.buyAllMonsters, this);
      this.buyAllMinions = bind(this.buyAllMinions, this);
      this.buyAcolyte = bind(this.buyAcolyte, this);
      this.buyMonster = bind(this.buyMonster, this);
      this.buyMinion = bind(this.buyMinion, this);
      this.maxNumberToBuy = bind(this.maxNumberToBuy, this);
      this.monstersActive = bind(this.monstersActive, this);
      this.availablePopulation = bind(this.availablePopulation, this);
      this.maxPopulation = bind(this.maxPopulation, this);
      this.totalPopulation = bind(this.totalPopulation, this);
      this.roomCost = bind(this.roomCost, this);
      this.setRoomETA = bind(this.setRoomETA, this);
      this.updateRoomBox = bind(this.updateRoomBox, this);
      this.updateTreasureBox = bind(this.updateTreasureBox, this);
      this.updateAcolyteBox = bind(this.updateAcolyteBox, this);
      this.updateMonsterBox = bind(this.updateMonsterBox, this);
      this.updateMinionBox = bind(this.updateMinionBox, this);
      this.updateReputationBox = bind(this.updateReputationBox, this);
      this.updateValues = bind(this.updateValues, this);
      this.tick = bind(this.tick, this);
      var i, j, k, ref, ref1;
      this.minions = 5;
      this.monsters = 5;
      this.monsterObjects = [];
      for (i = j = 0, ref = this.monsters - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        this.monsterObjects[i] = new Monster();
      }
      this.acolytes = 5;
      this.treasure = 10;
      this.roomProgress = 0;
      this.rooms = 5;
      this.roomObjects = [];
      this.roomObjects[0] = new Room();
      this.roomObjects[0].population = 5;
      this.roomObjects[0].occupantType = unitTypes.minion;
      this.roomObjects[1] = new Room();
      this.roomObjects[1].population = 5;
      this.roomObjects[1].occupantType = unitTypes.monster;
      this.roomObjects[1].population = 5;
      for (i = k = 0, ref1 = this.monsters - 1; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {
        this.roomObjects[1].monsters[i] = this.monsterObjects[i];
      }
      this.roomObjects[2] = new Room();
      this.roomObjects[2].occupantType = unitTypes.acolyte;
      this.roomObjects[2].population = 5;
      this.roomObjects[3] = new Room();
      this.roomObjects[4] = new Room();
      this.adventurers = 0;
      this.reputation = 0;
      this.devMultiplier = 1;
      this.cost = 1500;
      $('#buyMinion').on('click', this.buyMinion);
      $('#buyMonster').on('click', this.buyMonster);
      $('#buyAcolyte').on('click', this.buyAcolyte);
      $('#buyAllMinions').on('click', this.buyAllMinions);
      $('#buyAllMonsters').on('click', this.buyAllMonsters);
      $('#buyAllAcolytes').on('click', this.buyAllAcolytes);
    }

    Dungeon.prototype.tick = function() {
      var i, j, len, monster, ref, results;
      this.updateValues();
      this.updateTreasureBox();
      this.updateMinionBox();
      this.updateMonsterBox();
      this.updateAcolyteBox();
      this.updateReputationBox();
      this.updateRoomBox();
      ref = this.monsterObjects;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        monster = ref[j];
        results.push((function() {
          var k, ref1, results1;
          results1 = [];
          for (i = k = 0, ref1 = this.devMultiplier - 1; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {
            results1.push(monster.tick());
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Dungeon.prototype.updateValues = function() {
      var adventurerRoll, i, j, ref, results;
      this.roomProgress += this.minions * this.devMultiplier;
      if (this.roomProgress >= this.roomCost()) {
        this.roomProgress -= this.roomCost();
        this.rooms += 1;
        this.roomObjects[this.rooms - 1] = new Room();
      }
      this.reputation += this.acolytes * this.devMultiplier;
      results = [];
      for (i = j = 0, ref = Math.floor(this.treasure * this.devMultiplier) - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        adventurerRoll = Math.floor((Math.random() * 14500) + 1);
        if (adventurerRoll === 14500) {
          results.push(this.runDungeon());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Dungeon.prototype.updateReputationBox = function() {
      $('#reputationCount').text(this.reputation);
      return $('#reputationRate').text(this.acolytes * 10);
    };

    Dungeon.prototype.updateMinionBox = function() {
      var roomProgressPercent;
      $('#minionCount').text(this.minions);
      $('#buyAllMinions').text("Buy All (" + (this.maxNumberToBuy(this.cost)) + ")");
      $('#population').text(this.totalPopulation());
      $('#maxPopulation').text(this.maxPopulation());
      roomProgressPercent = (this.roomProgress / this.roomCost() * 100).toString();
      $('#roomCount').text(this.rooms);
      this.updateProgressBar($('#roomBar'), roomProgressPercent);
      return this.setRoomETA();
    };

    Dungeon.prototype.updateMonsterBox = function() {
      $('#monsterCount').text(this.monsters);
      $('#monsterActiveCount').text(this.monstersActive());
      return $('#buyAllMonsters').text("Buy All (" + (this.maxNumberToBuy(this.cost)) + ")");
    };

    Dungeon.prototype.updateAcolyteBox = function() {
      $('#acolyteCount').text(this.acolytes);
      $('#acolyteReputationRate').text(this.acolytes * 10);
      return $('#buyAllAcolytes').text("Buy All (" + (this.maxNumberToBuy(this.cost)) + ")");
    };

    Dungeon.prototype.updateTreasureBox = function() {
      $('#adventurerCount').text(this.adventurers);
      return $('#treasureCount').text(this.treasure);
    };

    Dungeon.prototype.updateRoomBox = function() {
      var i, j, ref, room, text;
      text = "Room Summary:<br><br>";
      for (i = j = 0, ref = this.rooms - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        room = this.roomObjects[i];
        text += "Room " + (i + 1).toString() + ":<br>Contains ";
        if (room.occupantType === unitTypes.none) {
          text += "nothing";
        } else if (room.occupantType === unitTypes.minion) {
          text += "minions";
        } else if (room.occupantType === unitTypes.monster) {
          text += "monsters";
        } else if (room.occupantType === unitTypes.acolyte) {
          text += "acolytes";
        }
        text += ".<br>Population: " + room.population.toString() + "/" + room.size.toString() + "<br><br>";
      }
      return document.getElementById('roomsPanel').innerHTML = text;
    };

    Dungeon.prototype.setRoomETA = function() {
      var duration, eta, moment_time, rate, remaining, specific;
      remaining = this.roomCost() - this.roomProgress;
      rate = this.minions * this.devMultiplier;
      eta = Math.floor(remaining / rate);
      duration = moment.duration(eta * 100);
      moment_time = duration.humanize();
      specific = "";
      if (duration.years() > 0) {
        specific += (duration.years()) + " years ";
      }
      if (duration.months() > 0) {
        specific += (duration.months()) + " months ";
      }
      if (duration.days() > 0) {
        specific += (duration.days()) + " days ";
      }
      if (duration.hours() > 0) {
        specific += (duration.hours()) + " hours ";
      }
      if (duration.minutes() > 0) {
        specific += (duration.minutes()) + " minutes ";
      }
      if (duration.seconds() > 0) {
        specific += (duration.seconds()) + " seconds ";
      }
      return $('#roomETA').text(specific);
    };

    Dungeon.prototype.updateProgressBar = function(bar, percent) {
      return bar.width(percent + "%");
    };

    Dungeon.prototype.roomCost = function() {
      var costToBuild;
      costToBuild = 12240;
      if (this.rooms >= 100) {
        costToBuild = 124711488;
      } else if (this.rooms >= 30) {
        costToBuild = 124711488;
      } else if (this.rooms >= 20) {
        costToBuild = 124711488;
      }
      return costToBuild;
    };

    Dungeon.prototype.totalPopulation = function() {
      return this.minions + this.monsters + this.acolytes;
    };

    Dungeon.prototype.maxPopulation = function() {
      return this.rooms * 5;
    };

    Dungeon.prototype.availablePopulation = function() {
      return Math.max(this.maxPopulation() - this.totalPopulation(), 0);
    };

    Dungeon.prototype.monstersActive = function() {
      var count, j, len, monster, ref;
      count = 0;
      ref = this.monsterObjects;
      for (j = 0, len = ref.length; j < len; j++) {
        monster = ref[j];
        if (monster.isActive()) {
          count += 1;
        }
      }
      return count;
    };

    Dungeon.prototype.maxNumberToBuy = function(cost) {
      return Math.min(Math.floor(this.reputation / cost), this.availablePopulation());
    };

    Dungeon.prototype.buyMinion = function() {
      if (this.reputation > this.cost && this.totalPopulation() < this.maxPopulation()) {
        if (this.allocateRoom(unitTypes.minion)) {
          this.minions += 1;
          return this.reputation -= this.cost;
        }
      }
    };

    Dungeon.prototype.buyMonster = function() {
      if (this.reputation > this.cost && this.totalPopulation() < this.maxPopulation()) {
        if (this.allocateRoom(unitTypes.monster)) {
          this.reputation -= this.cost;
          return this.monsters += 1;
        }
      }
    };

    Dungeon.prototype.buyAcolyte = function() {
      if (this.reputation > this.cost && this.totalPopulation() < this.maxPopulation()) {
        if (this.allocateRoom(unitTypes.acolyte)) {
          this.reputation -= this.cost;
          return this.acolytes += 1;
        }
      }
    };

    Dungeon.prototype.buyAllMinions = function() {
      var i, j, number, ref, results;
      number = this.maxNumberToBuy(this.cost);
      results = [];
      for (i = j = 0, ref = number - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        results.push(this.buyMinion());
      }
      return results;
    };

    Dungeon.prototype.buyAllMonsters = function() {
      var i, j, number, ref, results;
      number = this.maxNumberToBuy(this.cost);
      results = [];
      for (i = j = 0, ref = number - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        results.push(this.buyMonster());
      }
      return results;
    };

    Dungeon.prototype.buyAllAcolytes = function() {
      var i, j, number, ref, results;
      number = this.maxNumberToBuy(this.cost);
      results = [];
      for (i = j = 0, ref = number - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        results.push(this.buyAcolyte());
      }
      return results;
    };

    Dungeon.prototype.runDungeon = function() {
      var adventurer, j, len, ref, room;
      this.narrate('An adventurer arrives!');
      adventurer = new Adventurer();
      ref = this.roomObjects;
      for (j = 0, len = ref.length; j < len; j++) {
        room = ref[j];
        if (room.occupantType === unitTypes.monster) {
          console.log(room);
          if (this.encounterMonsters(adventurer, room)) {
            return;
          }
        }
      }
      if (this.treasure > 1) {
        this.treasure -= 1;
        this.narrate('The adventurer has successfully beaten all of your monsters! They take one of your treasures!');
        return console.log("activemonsters: " + (this.monstersActive()));
      } else {
        return this.narrate('The adventurer finds nothing and leaves.');
      }
    };

    Dungeon.prototype.encounterMonsters = function(adventurer, room) {
      this.doCombat(adventurer, room);
      if (adventurer.hp <= 0) {
        this.defeatAdventurer(room);
        return true;
      } else {
        return false;
      }
    };

    Dungeon.prototype.doCombat = function(adventurer, room) {
      var j, len, monster, ref, results, turnRoll;
      if (this.anyMonstersActive(room)) {
        turnRoll = Math.floor((Math.random() * 2) + 1);
        results = [];
        while (adventurer.hp > 0 && this.anyMonstersActive(room)) {
          if (turnRoll === 1) {
            monster = this.monsterWithLowestHp(room);
            monster.hp -= Math.floor((Math.random() * 8) + 3);
            turnRoll = 2;
            if (monster.hp <= 0) {
              monster.hp = 0;
              monster.health = 0;
              results.push(this.narrate('One of your monsters has been disabled by an adventurer.'));
            } else {
              results.push(void 0);
            }
          } else if (turnRoll === 2) {
            ref = room.monsters;
            for (j = 0, len = ref.length; j < len; j++) {
              monster = ref[j];
              adventurer.hp -= Math.floor((Math.random() * 12) + 4 + monster.damage);
            }
            results.push(turnRoll = 1);
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    Dungeon.prototype.anyMonstersActive = function(room) {
      var j, len, monster, ref;
      ref = room.monsters;
      for (j = 0, len = ref.length; j < len; j++) {
        monster = ref[j];
        if (monster.isActive()) {
          return true;
        }
      }
      return false;
    };

    Dungeon.prototype.monsterWithLowestHp = function(room) {
      var j, len, lowestHp, monster, monsterSelected, ref;
      lowestHp = 1000000;
      monsterSelected = null;
      ref = room.monsters;
      for (j = 0, len = ref.length; j < len; j++) {
        monster = ref[j];
        if (monster.hp < lowestHp && monster.isActive()) {
          lowestHp = monster.hp;
          monsterSelected = monster;
        }
      }
      return monsterSelected;
    };

    Dungeon.prototype.numActiveMonsters = function(room) {
      var count, j, len, monster, ref;
      count = 0;
      ref = room.monsters;
      for (j = 0, len = ref.length; j < len; j++) {
        monster = ref[j];
        if (monster.isActive()) {
          count += 1;
        }
      }
      return count;
    };

    Dungeon.prototype.defeatAdventurer = function(room) {
      var j, len, monster, ref, xp;
      this.adventurers += 1;
      this.treasure += 1;
      xp = Math.floor(100 / this.numActiveMonsters(room));
      ref = room.monsters;
      for (j = 0, len = ref.length; j < len; j++) {
        monster = ref[j];
        if (monster.isActive()) {
          monster.xp += xp;
          monster.checkForLevelUp();
        }
      }
      return this.narrate('Some of your monsters have slain the adventurer! You take their treasure!');
    };

    Dungeon.prototype.narrate = function(text) {
      document.getElementById('narrationContainer').innerHTML += '<br>' + text;
      return document.getElementById('narrationContainer').scrollTop = document.getElementById('narrationContainer').scrollHeight;
    };

    Dungeon.prototype.allocateRoom = function(type) {
      var j, len, ref, room;
      ref = this.roomObjects;
      for (j = 0, len = ref.length; j < len; j++) {
        room = ref[j];
        if (room.occupantType === unitTypes.none) {
          room.occupantType = type;
          room.population += 1;
          this.addMonsterToRoom(room);
          return true;
        } else if (room.occupantType === type && room.population < room.size) {
          room.population += 1;
          this.addMonsterToRoom(room);
          return true;
        }
      }
      return false;
    };

    Dungeon.prototype.addMonsterToRoom = function(room) {
      var monster;
      if (room.occupantType === unitTypes.monster) {
        monster = new Monster();
        this.monsterObjects[this.monsters] = monster;
        return room.monsters[room.population - 1] = monster;
      }
    };

    return Dungeon;

  })();

  Monster = (function() {
    function Monster() {
      this.levelUp = bind(this.levelUp, this);
      this.checkForLevelUp = bind(this.checkForLevelUp, this);
      this.tick = bind(this.tick, this);
      this.isActive = bind(this.isActive, this);
      this.maxHealth = 2400;
      this.health = 2400;
      this.hp = 15;
      this.maxHp = 15;
      this.xp = 0;
      this.level = 1;
      this.damage = 0;
    }

    Monster.prototype.isActive = function() {
      if (this.health === this.maxHealth) {
        return true;
      } else {
        return false;
      }
    };

    Monster.prototype.tick = function() {
      var roll;
      if (this.health < this.maxHealth) {
        this.health += 1;
        if (this.health === this.maxHealth) {
          this.hp = this.maxHp;
          window.simulator.narrate('One of your monsters has recovered.');
        }
      }
      if (this.hp < this.maxHp) {
        roll = Math.floor((Math.random() * 160) + 1);
        if (roll === 160) {
          return this.hp += 1;
        }
      }
    };

    Monster.prototype.checkForLevelUp = function() {
      var j, len, level, results, tier, xpTable;
      xpTable = [300, 900, 2700, 6500, 14000, 23000, 34000, 48000, 64000, 85000, 100000, 120000, 140000, 165000, 195000, 225000, 265000, 305000, 355000];
      level = 1;
      for (j = 0, len = xpTable.length; j < len; j++) {
        tier = xpTable[j];
        if (this.xp > tier) {
          level += 1;
        } else {
          break;
        }
      }
      if (level > this.level) {
        results = [];
        while (level > this.level) {
          results.push(this.levelUp());
        }
        return results;
      }
    };

    Monster.prototype.levelUp = function() {
      this.level += 1;
      window.simulator.narrate('One of your monsters has attained level ' + this.level.toString() + '!');
      this.hp += 7;
      this.maxHp += 7;
      return this.damage += 1;
    };

    return Monster;

  })();

  Adventurer = (function() {
    function Adventurer() {
      this.hp = 13;
    }

    return Adventurer;

  })();

  Room = (function() {
    function Room() {
      this.population = 0;
      this.size = 5;
      this.occupantType = unitTypes.none;
      this.monsters = [];
    }

    return Room;

  })();

  unitTypes = {
    none: -1,
    minion: 0,
    monster: 1,
    acolyte: 2
  };

  $(function() {
    window.simulator = new Dungeon;
    return setInterval(window.simulator.tick, 100);
  });

}).call(this);
